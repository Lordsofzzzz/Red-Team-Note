---
import crypto from 'node:crypto'

const id = `moon-mask-${crypto.randomBytes(4).toString('hex')}`

// Inspired by: 
// - https://web.dev/building-a-theme-switch-component/
// - https://github.com/withastro/starlight/blob/main/packages/starlight/components/ThemeSelect.astro
---

<!-- Inline script to prevent theme flash -->
<script is:inline>
  // Immediately runs during page load before any rendering
  (function() {
    const STORAGE_KEY = 'theme-preference';
    const THEME_ATTR = 'data-theme';
    
    function getSystemTheme() {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }
    
    function getStoredTheme() {
      return localStorage.getItem(STORAGE_KEY) || 'auto';
    }
    
    // Get saved theme
    const savedTheme = getStoredTheme();
    // Apply theme immediately
    const activeTheme = savedTheme === 'auto' ? getSystemTheme() : savedTheme;
    document.documentElement.setAttribute(THEME_ATTR, activeTheme);
  })();
</script>

<theme-toggle>
  <button
    aria-label="Toggle dark mode"
    aria-live="polite"
    class="toggle-btn"
    title="Toggle dark mode"
  >
    <svg aria-hidden="true" height="18" viewBox="0 0 24 24" width="18">
      <mask class="moon" id={id}>
        <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
        <circle cx="24" cy="10" r="6" fill="black"></circle>
      </mask>
      <circle class="sun" cx="12" cy="12" r="6" mask={`url(#${id})`}></circle>
      <g class="sun-beams" stroke="currentColor">
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </g>
    </svg>
  </button>
</theme-toggle>

<style>
  theme-toggle {
    --animation-duration: 400ms;
    --animation-ease: cubic-bezier(0.5, 1.25, 0.75, 1.25);
    
    display: flex;
    align-items: center;
    height: 1.75rem; /* Reduced from 2rem */
    margin-inline: 0.4rem; /* Slightly reduced margin */
  }

  .toggle-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    border: none;
    padding: 0.3rem; /* Reduced from 0.375rem */
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .toggle-btn:hover {
    transform: scale(1.125);
  }

  .toggle-btn:focus-visible {
    outline: 2px solid var(--sl-color-accent, var(--color-accent, #0077ff));
    outline-offset: 2px;
    border-radius: 4px;
  }

  svg {
    stroke-linecap: round;
    width: 1.25rem; /* Reduced from 1.5rem */
    height: 1.25rem; /* Reduced from 1.5rem */
  }

  svg :is(.moon, .sun, .sun-beams) {
    transform-origin: center;
  }

  svg :is(.moon, .sun) {
    fill: var(--sl-color-text-accent, var(--color-text, #333));
  }

  svg .sun-beams {
    stroke: var(--sl-color-text-accent, var(--color-text, #333));
    stroke-width: 1.75px; /* Slightly reduced from 2px */
  }

  :global([data-theme='dark']) svg .sun {
    transform: scale(1.75);
  }

  :global([data-theme='dark']) svg .sun-beams {
    opacity: 0;
  }

  :global([data-theme='dark']) svg .moon circle {
    transform: translateX(-7px);
  }

  @supports (cx: 1) {
    :global([data-theme='dark']) svg .moon circle {
      cx: 17;
      transform: translateX(0);
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    svg .sun {
      transition: transform var(--animation-duration) var(--animation-ease);
    }

    svg .sun-beams {
      transition:
        opacity var(--animation-duration) ease,
        transform var(--animation-duration) var(--animation-ease);
    }

    svg .moon circle {
      transition: transform calc(var(--animation-duration) / 2) ease-out;
    }

    @supports (cx: 1) {
      svg .moon circle {
        transition: cx calc(var(--animation-duration) / 2) ease-out;
      }
    }

    :global([data-theme='dark']) svg .sun {
      transform: scale(1.75);
      transition-duration: calc(var(--animation-duration) / 2);
      transition-timing-function: ease;
    }

    :global([data-theme='dark']) svg .sun-beams {
      transform: rotateZ(-25deg);
      transition-duration: calc(var(--animation-duration) / 4);
    }

    :global([data-theme='dark']) svg .moon circle {
      transition-delay: calc(var(--animation-duration) / 4);
      transition-duration: var(--animation-duration);
    }
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
      
      // Constants
      const STORAGE_KEY = 'theme-preference';
      const THEME_ATTR = 'data-theme';
      
      // DOM elements
      const button = this.querySelector('button');
      
      // Helper functions
      const getSystemTheme = () => {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      
      const getStoredTheme = () => {
        return localStorage.getItem(STORAGE_KEY) || 'auto';
      };
      
      const setTheme = (theme) => {
        // Store user preference
        localStorage.setItem(STORAGE_KEY, theme);
        
        // Set the active theme
        const activeTheme = theme === 'auto' ? getSystemTheme() : theme;
        document.documentElement.setAttribute(THEME_ATTR, activeTheme);
      };
      
      const toggleTheme = () => {
        const currentTheme = document.documentElement.getAttribute(THEME_ATTR);
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        setTheme(newTheme);
      };
      
      // Initialize
      const savedTheme = getStoredTheme();
      setTheme(savedTheme);
      
      // Event listener for button click
      button?.addEventListener('click', toggleTheme);
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (getStoredTheme() === 'auto') {
          setTheme('auto');
        }
      });
    }
  }

  // Register the custom element
  customElements.define('theme-toggle', ThemeToggle);
</script>